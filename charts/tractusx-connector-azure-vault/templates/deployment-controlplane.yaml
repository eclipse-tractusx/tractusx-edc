#
  #  Copyright (c) 2023 ZF Friedrichshafen AG
  #  Copyright (c) 2023 Mercedes-Benz Tech Innovation GmbH
  #  Copyright (c) 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
  #  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
  #
  #  See the NOTICE file(s) distributed with this work for additional
  #  information regarding copyright ownership.
  #
  #  This program and the accompanying materials are made available under the
  #  terms of the Apache License, Version 2.0 which is available at
  #  https://www.apache.org/licenses/LICENSE-2.0
  #
  #  Unless required by applicable law or agreed to in writing, software
  #  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  #  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  #  License for the specific language governing permissions and limitations
  #  under the License.
  #
  #  SPDX-License-Identifier: Apache-2.0
  #

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "txdc.fullname" . }}-controlplane
  labels:
    {{- include "txdc.controlplane.labels" . | nindent 4 }}
spec:
  {{- if not .Values.controlplane.autoscaling.enabled }}
  replicas: {{ .Values.controlplane.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "txdc.controlplane.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.controlplane.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "txdc.controlplane.selectorLabels" . | nindent 8 }}
        {{- with .Values.controlplane.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "txdc.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.controlplane.podSecurityContext | nindent 8 }}
      {{- if or .Values.controlplane.initContainers .Values.customCaCerts }}
      initContainers:
        {{- if .Values.controlplane.initContainers }}
        {{- toYaml .Values.controlplane.initContainers | nindent 8 }}
        {{- end }}
        {{- if .Values.customCaCerts }}
        - name: custom-cacerts
          # either use the specified image, or use the default one
          {{- if .Values.controlplane.image.repository }}
          image: "{{ .Values.controlplane.image.repository }}:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else }}
          image: "tractusx/edc-controlplane-postgresql-azure-vault:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.controlplane.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              cp /opt/java/openjdk/lib/security/cacerts /workdir/
              find /cacerts -type f \( -iname \*.crt -o -iname \*.pem \) -exec echo "{}" \; | while read PEM_FILE_PATH; do
                PEM_FILE=${PEM_FILE_PATH##*/}
                ALIAS=${PEM_FILE%.*}
                echo "adding ${PEM_FILE} with alias ${ALIAS} to cacerts ..."
                keytool -import -noprompt -trustcacerts -alias ${ALIAS} -file ${PEM_FILE_PATH} -keystore /workdir/cacerts -storepass changeit
              done
          securityContext:
            {{- toYaml .Values.controlplane.securityContext | nindent 12 }}
          volumeMounts:
            - name: custom-cacertificates
              mountPath: /cacerts
            - name: custom-cacerts
              mountPath: /workdir
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.controlplane.securityContext | nindent 12 }}

          # either use the specified image, or use the default one
          {{- if .Values.controlplane.image.repository }}
          image: "{{ .Values.controlplane.image.repository }}:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else }}
          image: "tractusx/edc-controlplane-postgresql-azure-vault:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.controlplane.image.pullPolicy }}
          ports:
          {{- range $key,$value := .Values.controlplane.endpoints }}
            - name: {{ $key }}
              containerPort: {{ $value.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.controlplane.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.controlplane.endpoints.default.path }}/check/liveness
              port: {{ .Values.controlplane.endpoints.default.port }}
            initialDelaySeconds: {{ .Values.controlplane.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controlplane.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controlplane.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.controlplane.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.controlplane.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.controlplane.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.controlplane.endpoints.default.path }}/check/readiness
              port: {{ .Values.controlplane.endpoints.default.port }}
            initialDelaySeconds: {{ .Values.controlplane.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controlplane.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controlplane.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.controlplane.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.controlplane.readinessProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.controlplane.resources | nindent 12 }}
          env:
          {{- if .Values.controlplane.debug.enabled }}
            - name: "JAVA_TOOL_OPTIONS"
            {{- if .Values.controlplane.debug.suspendOnStart }}
              value: >-
                {{ printf "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=%v" .Values.controlplane.debug.port }}
            {{- else }}
              value: >-
                {{ printf "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=%v" .Values.controlplane.debug.port }}
            {{- end }}
          {{- end }}

            ########################
            ## ID CONFIGURATION ##
            ########################
            - name: EDC_PARTICIPANT_ID
              value: {{ .Values.participant.id | required ".Values.participant.id is required" | quote }}
            - name: "EDC_IAM_ISSUER_ID"
              value: {{ .Values.iatp.id | required ".Values.iatp.id is required" | quote}}

            #######
            # API #
            #######
            {{- if .Values.controlplane.endpoints.management.jwksUrl }}
            - name: "EDC_API_AUTH_DAC_KEY_URL"
              value: {{ .Values.controlplane.endpoints.management.jwksUrl | quote}}
            {{- else }}
            - name: "EDC_API_AUTH_KEY"
              value: {{ .Values.controlplane.endpoints.management.authKey | required ".Values.controlplane.endpoints.management.authKey is required" | quote }}
            {{- end }}
            
            - name: "WEB_HTTP_DEFAULT_PORT"
              value: {{ .Values.controlplane.endpoints.default.port | quote }}
            - name: "WEB_HTTP_DEFAULT_PATH"
              value: {{ .Values.controlplane.endpoints.default.path | quote }}
            - name: "WEB_HTTP_MANAGEMENT_PORT"
              value: {{ .Values.controlplane.endpoints.management.port | quote }}
            - name: "WEB_HTTP_MANAGEMENT_PATH"
              value: {{ .Values.controlplane.endpoints.management.path | quote }}
            - name: "WEB_HTTP_CONTROL_PORT"
              value: {{ .Values.controlplane.endpoints.control.port | quote }}
            - name: "WEB_HTTP_CONTROL_PATH"
              value: {{ .Values.controlplane.endpoints.control.path | quote }}
            - name: "WEB_HTTP_PROTOCOL_PORT"
              value: {{ .Values.controlplane.endpoints.protocol.port | quote }}
            - name: "WEB_HTTP_PROTOCOL_PATH"
              value: {{ .Values.controlplane.endpoints.protocol.path | quote }}
            - name: "EDC_CONTROL_ENDPOINT"
              value: {{ include "txdc.controlplane.url.control" .}}
            - name: "WEB_HTTP_CATALOG_PORT"
              value: {{ .Values.controlplane.endpoints.catalog.port | quote }}
            - name: "WEB_HTTP_CATALOG_PATH"
              value: {{ .Values.controlplane.endpoints.catalog.path | quote }}
            - name: "WEB_HTTP_CATALOG_AUTH_TYPE"
              value: "tokenbased"
            - name: "WEB_HTTP_CATALOG_AUTH_KEY"
              value: {{ .Values.controlplane.endpoints.catalog.authKey | required ".Values.controlplane.endpoints.catalog.authKey is required" | quote }}


            #########
            ## DSP ##
            #########

            - name: "EDC_DSP_CALLBACK_ADDRESS"
              value: {{ printf "%s%s" (include "txdc.controlplane.url.protocol" .) .Values.controlplane.endpoints.protocol.path | quote }}
            - name: "EDC_OAUTH_PROVIDER_AUDIENCE"
              value: "idsc:IDS_CONNECTORS_ALL"
            - name: "EDC_OAUTH_ENDPOINT_AUDIENCE"
              value: {{ printf "%s%s" (include "txdc.controlplane.url.protocol" . ) .Values.controlplane.endpoints.protocol.path | quote }}

            ################
            ## POSTGRESQL ##
            ################

            # default datasource
            - name: "EDC_DATASOURCE_DEFAULT_USER"
              value: {{ .Values.postgresql.auth.username | required ".Values.postgresql.auth.username is required" | quote }}
            - name: "EDC_DATASOURCE_DEFAULT_PASSWORD"
              value: {{ .Values.postgresql.auth.password | required ".Values.postgresql.auth.password is required" | quote }}
            - name: "EDC_DATASOURCE_DEFAULT_URL"
              value: {{ tpl .Values.postgresql.jdbcUrl . | quote }}

            #############################
            ## IATP / STS / DIM CONFIG ##
            #############################
            - name: "EDC_IAM_STS_OAUTH_TOKEN_URL"
              value: {{ .Values.iatp.sts.oauth.token_url | required ".Values.iatp.sts.oauth.token_url is required" | quote}}
            - name: "EDC_IAM_STS_OAUTH_CLIENT_ID"
              value: {{ .Values.iatp.sts.oauth.client.id | required ".Values.iatp.sts.oauth.client.id is required" | quote}}
            - name: "EDC_IAM_STS_OAUTH_CLIENT_SECRET_ALIAS"
              value: {{ .Values.iatp.sts.oauth.client.secret_alias | required ".Values.iatp.sts.oauth.client.secret_alias is required" | quote}}
            {{- if .Values.iatp.sts.dim.url }}
            - name: "TX_EDC_IAM_STS_DIM_URL"
              value: {{ .Values.iatp.sts.dim.url | quote}}
            {{- end}}

            {{- range $index, $issuer := .Values.iatp.trustedIssuers }}
            - name: "EDC_IAM_TRUSTED-ISSUER_{{$index}}-ISSUER_ID"
              value: {{ $issuer | quote }}
            {{- end }}

            #################
            ## BDRS CLIENT ##
            #################

            - name: "TX_IAM_IATP_BDRS_SERVER_URL"
              value: {{ .Values.controlplane.bdrs.server.url | required ".Values.controlplane.bdrs.server.url is required" | quote }}
            {{- if .Values.controlplane.bdrs.cache_validity_seconds }}
            - name: "TX_IAM_IATP_BDRS_CACHE_VALIDITY"
              value: {{ .Values.controlplane.bdrs.cache_validity_seconds | quote}}
            {{- end}}

            ###########
            ## VAULT ##
            ###########

            - name: "EDC_VAULT_NAME"
              value: {{ .Values.vault.azure.name | required ".Values.vault.azure.name is required" | quote }}
            # only set the env vars if config value not null
            {{- if .Values.vault.azure.client }}
            - name: "AZURE_CLIENT_ID"
              value: {{ .Values.vault.azure.client | quote  }}
            {{- end }}
            {{- if .Values.vault.azure.tenant }}
            - name: "AZURE_TENANT_ID"
              value: {{ .Values.vault.azure.tenant | quote }}
            {{- end }}
            {{- if .Values.vault.azure.secret }}
            - name: "AZURE_CLIENT_SECRET"
              value: {{ .Values.vault.azure.secret | quote }}
            {{- end }}
            {{- if .Values.vault.azure.certificate }}
            - name: "AZURE_CLIENT_CERTIFICATE_PATH"
              value: {{ .Values.vault.azure.certificate | quote }}
            {{- end }}

            ###############################
            ## FEDERATED CATALOG CRAWLER ##
            ###############################
            {{- if .Values.controlplane.catalog.crawler.period }}
            - name: "EDC_CATALOG_CACHE_EXECUTION_PERIOD_SECONDS"
              value: {{ .Values.controlplane.catalog.crawler.period | quote}}
            {{- end }}

            {{- if .Values.controlplane.catalog.crawler.initialDelay }}
            - name: "EDC_CATALOG_CACHE_EXECUTION_DELAY_SECONDS"
              value: {{ .Values.controlplane.catalog.crawler.initialDelay | quote }}
            {{- end }}

            {{- if .Values.controlplane.catalog.crawler.num }}
            - name: "EDC_CATALOG_CACHE_PARTITION_NUM_CRAWLERS"
              value: {{ .Values.controlplane.catalog.crawler.num }}
            {{- end }}

            - name: "EDC_CATALOG_CACHE_EXECUTION_ENABLED"
              value: {{ .Values.controlplane.catalog.enabled | quote }}

            - name: "TX_EDC_CATALOG_NODE_LIST_FILE"
              value: {{ .Values.controlplane.catalog.crawler.targetsFile }}

            ######################################
            ## Additional environment variables ##
            ######################################
            - name: "EDC_RUNTIME_ID"
              value: {{ include "txdc.fullname" .}}-controlplane
          {{- range $key, $value := .Values.controlplane.envValueFrom }}
            - name: {{ $key | quote }}
              valueFrom:
                {{- tpl (toYaml $value) $ | nindent 16 }}
          {{- end }}
          {{- range $key, $value := .Values.controlplane.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
          {{- end }}
          {{- if and (or .Values.controlplane.envSecretNames .Values.controlplane.envConfigMapNames) (or (gt (len .Values.controlplane.envSecretNames) 0) (gt (len .Values.controlplane.envConfigMapNames) 0)) }}
          envFrom:
          {{- range $value := .Values.controlplane.envSecretNames }}
            - secretRef:
                name: {{ $value | quote }}
          {{- end }}
          {{- range $value := .Values.controlplane.envConfigMapNames }}
            - configMapRef:
                name: {{ $value | quote }}
          {{- end }}
          {{- end }}
          volumeMounts:
           {{- if .Values.controlplane.volumeMounts }}
           {{- toYaml .Values.controlplane.volumeMounts | nindent 12 }}
           {{- end}}
            - name: "configuration"
              mountPath: "/app/opentelemetry.properties"
              subPath: "opentelemetry.properties"
            - name: "configuration"
              mountPath: "/app/logging.properties"
              subPath: "logging.properties"
            {{- if .Values.customCaCerts }}
            - name: custom-cacerts
              mountPath: /opt/java/openjdk/lib/security/cacerts
              subPath: cacerts
            {{- end }}
            - name: "tmp"
              mountPath: "/tmp"
      volumes:
       {{- if .Values.controlplane.volumeMounts }}
       {{- toYaml .Values.controlplane.volumes | nindent 8 }}
       {{- end}}
        - name: "configuration"
          configMap:
            name: {{ include "txdc.fullname" . }}-controlplane
            items:
              - key: "opentelemetry.properties"
                path: "opentelemetry.properties"
              - key: "logging.properties"
                path: "logging.properties"
        {{- if .Values.customCaCerts }}
        - name: custom-cacertificates
          configMap:
            name: {{ include "txdc.fullname" . }}-custom-cacerts
            defaultMode: 0400
        - name: custom-cacerts
          emptyDir:
            sizeLimit: 1Mi
        {{- end }}
        - name: "tmp"
          emptyDir: { }
      {{- with .Values.controlplane.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controlplane.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controlplane.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
