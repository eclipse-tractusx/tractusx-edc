#
#  Copyright (c) 2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#

fullnameOverride: tx-prod
################################
# EDC ControlPlane + DataPlane #
################################
participant:
  id: "test-participant"
controlplane:
  service:
    type: NodePort
  endpoints:
    management:
      authKey: password
  image:
    pullPolicy: Never
    tag: "latest"
    repository: "edc-controlplane-postgresql-hashicorp-vault-legacy"
  securityContext:
    # avoids some errors in the log: cannot write temp files of large multipart requests when R/O
    readOnlyRootFilesystem: false
dataplane:
  image:
    pullPolicy: Never
    tag: "latest"
    repository: "edc-dataplane-hashicorp-vault"
  securityContext:
    # avoids some errors in the log: cannot write temp files of large multipart requests when R/O
    readOnlyRootFilesystem: false
  aws:
    endpointOverride: http://minio:9000
    secretAccessKey: qwerty123
    accessKeyId: qwerty123
postgresql:
  jdbcUrl: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/edc
  auth:
    username: user
    password: password
vault:
  hashicorp:
    url: http://{{ .Release.Name }}-vault:8200
    token: root
  secretNames:
    transferProxyTokenSignerPublicKey: daps-crt
    transferProxyTokenSignerPrivateKey: daps-key
    transferProxyTokenEncryptionAesKey: aes-keys
    dapsPrivateKey: daps-key
    dapsPublicKey: daps-crt
  server:
    postStart:
      - sh
      - -c
      - |-
        {
        sleep 5

        cat << EOF | /bin/vault kv put secret/daps-crt content=-
        <<< ENTER CERTIFICATE CONTENT HERE!!! >>>
        EOF


        cat << EOF | /bin/vault kv put secret/daps-key content=-
        <<< ENTER PRIVATE KEY CONTENT HERE !!! >>>
        EOF


        /bin/vault kv put secret/aes-keys content=YWVzX2VuY2tleV90ZXN0Cg==

        }
daps:
  url: "http://{{ .Release.Name }}-daps:4567"
  clientId: "E7:07:2D:74:56:66:31:F0:7B:10:EA:B6:03:06:4C:23:7F:ED:A6:65:keyid:E7:07:2D:74:56:66:31:F0:7B:10:EA:B6:03:06:4C:23:7F:ED:A6:65"
backendService:
  httpProxyTokenReceiverUrl: "http://backend:8080"
tests:
  hookDeletePolicy: before-hook-creation
idsdaps:
  connectors:
    - certificate: |-
        <<< ENTER CERTIFICATE CONTENT HERE!!! >>>
