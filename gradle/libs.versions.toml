[metadata]
format.version = "1.1"

[versions]
edc = "0.3.1"
postgres = "42.6.0"
awaitility = "4.2.0"
nimbus = "9.35"
azure-identity = "1.10.1"
slf4j = "2.0.9"
okhttp = "4.11.0"
mockwebserver = "5.0.0-alpha.11"
bouncyCastle-jdk18on = "1.76"
mockito = "5.2.0"
restAssured = "5.3.2"
apache-sshd = "2.10.0"
testcontainers = "1.19.1"
aws = "2.20.153"
rsApi = "3.1.0"
jupiter = "5.10.0"
assertj = "3.24.2"
titanium = "1.3.2"
jackson = "2.15.2"
jakarta-json = "2.0.1"
tink = "1.11.0"
iron-vc = "0.8.1"

[libraries]
edc-spi-catalog = { module = "org.eclipse.edc:catalog-spi", version.ref = "edc" }
edc-spi-auth = { module = "org.eclipse.edc:auth-spi", version.ref = "edc" }
edc-spi-transfer = { module = "org.eclipse.edc:transfer-spi", version.ref = "edc" }
edc-spi-core = { module = "org.eclipse.edc:core-spi", version.ref = "edc" }
edc-spi-policy = { module = "org.eclipse.edc:policy-spi", version.ref = "edc" }
edc-spi-contract = { module = "org.eclipse.edc:contract-spi", version.ref = "edc" }
edc-spi-policyengine = { module = "org.eclipse.edc:policy-engine-spi", version.ref = "edc" }
edc-spi-transaction-datasource = { module = "org.eclipse.edc:transaction-datasource-spi", version.ref = "edc" }
edc-spi-transactionspi = { module = "org.eclipse.edc:transaction-spi", version.ref = "edc" }
edc-spi-aggregateservices = { module = "org.eclipse.edc:aggregate-service-spi", version.ref = "edc" }
edc-spi-controlplane = { module = "org.eclipse.edc:control-plane-spi", version.ref = "edc" }
edc-controlplane-apiclient = { module = "org.eclipse.edc:control-plane-api-client", version.ref = "edc" }
edc-spi-web = { module = "org.eclipse.edc:web-spi", version.ref = "edc" }
edc-spi-http = { module = "org.eclipse.edc:http-spi", version.ref = "edc" }
edc-spi-jsonld = { module = "org.eclipse.edc:json-ld-spi", version.ref = "edc" }
edc-spi-jwt = { module = "org.eclipse.edc:jwt-spi", version.ref = "edc" }
edc-jwt-core = { module = "org.eclipse.edc:jwt-core", version.ref = "edc" }
edc-spi-oauth2 = { module = "org.eclipse.edc:oauth2-spi", version.ref = "edc" }
edc-util = { module = "org.eclipse.edc:util", version.ref = "edc" }
edc-boot = { module = "org.eclipse.edc:boot", version.ref = "edc" }
edc-build-plugin = { module = "org.eclipse.edc.edc-build:org.eclipse.edc.edc-build.gradle.plugin", version.ref = "edc" }
edc-config-filesystem = { module = "org.eclipse.edc:configuration-filesystem", version.ref = "edc" }
edc-jsonld = { module = "org.eclipse.edc:json-ld", version.ref = "edc" }
edc-vault-filesystem = { module = "org.eclipse.edc:vault-filesystem", version.ref = "edc" }
edc-vault-hashicorp = { module = "org.eclipse.edc:vault-hashicorp", version.ref = "edc" }
edc-core-controlplane = { module = "org.eclipse.edc:control-plane-core", version.ref = "edc" }
edc-core-connector = { module = "org.eclipse.edc:connector-core", version.ref = "edc" }
edc-core-jetty = { module = "org.eclipse.edc:jetty-core", version.ref = "edc" }
edc-core-jersey = { module = "org.eclipse.edc:jersey-core", version.ref = "edc" }
edc-core-api = { module = "org.eclipse.edc:api-core", version.ref = "edc" }
edc-core-sql = { module = "org.eclipse.edc:sql-core", version.ref = "edc" }
edc-core-validator = { module = "org.eclipse.edc:validator-core", version.ref = "edc" }
edc-core-transform = { module = "org.eclipse.edc:transform-core", version.ref = "edc" }
edc-statemachine = { module = "org.eclipse.edc:state-machine", version.ref = "edc" }
edc-junit = { module = "org.eclipse.edc:junit", version.ref = "edc" }
edc-api-management-config = { module = "org.eclipse.edc:management-api-configuration", version.ref = "edc" }
edc-api-management = { module = "org.eclipse.edc:management-api", version.ref = "edc" }
edc-api-catalog = { module = "org.eclipse.edc:catalog-api", version.ref = "edc" }
edc-api-observability = { module = "org.eclipse.edc:api-observability", version.ref = "edc" }
edc-api-contractnegotiation = { module = "org.eclipse.edc:contract-negotiation-api", version.ref = "edc" }
edc-api-dataplane = { module = "org.eclipse.edc:dataplane-api", version.ref = "edc" }
edc-api-transferprocess = { module = "org.eclipse.edc:transfer-process-api", version.ref = "edc" }
edc-api-controlplane = { module = "org.eclipse.edc:control-plane-api", version.ref = "edc" }
edc-dsp = { module = "org.eclipse.edc:dsp", version.ref = "edc" }
edc-iam-mock = { module = "org.eclipse.edc:iam-mock", version.ref = "edc" }
edc-policy-engine = { module = "org.eclipse.edc:policy-engine", version.ref = "edc" }
edc-auth-tokenbased = { module = "org.eclipse.edc:auth-tokenbased", version.ref = "edc" }
edc-auth-oauth2-core = { module = "org.eclipse.edc:oauth2-core", version.ref = "edc" }
edc-auth-oauth2-daps = { module = "org.eclipse.edc:oauth2-daps", version.ref = "edc" }
edc-auth-oauth2-client = { module = "org.eclipse.edc:oauth2-client", version.ref = "edc" }
edc-transaction-local = { module = "org.eclipse.edc:transaction-local", version.ref = "edc" }
edc-ext-http = { module = "org.eclipse.edc:http", version.ref = "edc" }
edc-ext-azure-cosmos-core = { module = "org.eclipse.edc:azure-cosmos-core", version.ref = "edc" }
edc-ext-azure-test = { module = "org.eclipse.edc:azure-test", version.ref = "edc" }
edc-ext-jsonld = { module = "org.eclipse.edc:json-ld", version.ref = "edc" }
edc-ext-jersey-providers = { module = "org.eclipse.edc:jersey-providers", version.ref = "edc" }


# implementations
edc-sql-assetindex = { module = "org.eclipse.edc:asset-index-sql", version.ref = "edc" }
edc-sql-contract-definition = { module = "org.eclipse.edc:contract-definition-store-sql", version.ref = "edc" }
edc-sql-contract-negotiation = { module = "org.eclipse.edc:contract-negotiation-store-sql", version.ref = "edc" }
edc-sql-transferprocess = { module = "org.eclipse.edc:transfer-process-store-sql", version.ref = "edc" }
edc-sql-policydef = { module = "org.eclipse.edc:policy-definition-store-sql", version.ref = "edc" }
edc-sql-core = { module = "org.eclipse.edc:sql-core", version.ref = "edc" }
edc-sql-lease = { module = "org.eclipse.edc:sql-lease", version.ref = "edc" }
edc-sql-pool = { module = "org.eclipse.edc:sql-pool-apache-commons", version.ref = "edc" }

# azure stuff
edc-azure-vault = { module = "org.eclipse.edc:vault-azure", version.ref = "edc" }
edc-azure-identity = { module = "com.azure:azure-identity", version.ref = "azure-identity" }
edc-azure-test = { module = "org.eclipse.edc:azure-test", version.ref = "edc" }

# EDC aws s3 stuff
edc-aws-s3-core = { module = "org.eclipse.edc:aws-s3-core", version.ref = "edc" }
edc-aws-s3-test = { module = "org.eclipse.edc:aws-s3-test", version.ref = "edc" }
edc-dpf-awss3 = { module = "org.eclipse.edc:data-plane-aws-s3", version.ref = "edc" }

# Control Plane implementations
edc-controlplane-callback-dispatcher-event = { module = "org.eclipse.edc:callback-event-dispatcher", version.ref = "edc" }
edc-controlplane-callback-dispatcher-http = { module = "org.eclipse.edc:callback-http-dispatcher", version.ref = "edc" }


# DPF modules
edc-spi-dataplane-dataplane = { module = "org.eclipse.edc:data-plane-spi", version.ref = "edc" }
edc-spi-dataplane-transfer = { module = "org.eclipse.edc:transfer-data-plane-spi", version.ref = "edc" }
edc-spi-dataplane-selector = { module = "org.eclipse.edc:data-plane-selector-spi", version.ref = "edc" }
edc-dpf-transferclient = { module = "org.eclipse.edc:data-plane-transfer-client", version.ref = "edc" }
edc-dpf-selector-client = { module = "org.eclipse.edc:data-plane-selector-client", version.ref = "edc" }
edc-dpf-selector-spi = { module = "org.eclipse.edc:data-plane-selector-spi", version.ref = "edc" }
edc-dpf-selector-core = { module = "org.eclipse.edc:data-plane-selector-core", version.ref = "edc" }
edc-dpf-transfer = { module = "org.eclipse.edc:transfer-data-plane", version.ref = "edc" }
edc-dpf-core = { module = "org.eclipse.edc:data-plane-core", version.ref = "edc" }
edc-dpf-util = { module = "org.eclipse.edc:data-plane-util", version.ref = "edc" }

edc-dpf-azblob = { module = "org.eclipse.edc:data-plane-azure-storage", version.ref = "edc" }
edc-dpf-http = { module = "org.eclipse.edc:data-plane-http", version.ref = "edc" }
edc-dpf-oauth2 = { module = "org.eclipse.edc:data-plane-http-oauth2", version.ref = "edc" }
edc-dpf-api = { module = "org.eclipse.edc:data-plane-api", version.ref = "edc" }

# micrometer and other infra stuff
edc-micrometer-core = { module = "org.eclipse.edc:micrometer-core", version.ref = "edc" }
edc-micrometer-jersey = { module = "org.eclipse.edc:jersey-micrometer", version.ref = "edc" }
edc-micrometer-jetty = { module = "org.eclipse.edc:jetty-micrometer", version.ref = "edc" }
edc-monitor-jdklogger = { module = "org.eclipse.edc:monitor-jdk-logger", version.ref = "edc" }
edc-transfer-dynamicreceiver = { module = "org.eclipse.edc:transfer-pull-http-dynamic-receiver", version.ref = "edc" }
edc-transfer-receiver = { module = "org.eclipse.edc:transfer-pull-http-receiver", version.ref = "edc" }

# other deps

postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
nimbus-jwt = { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "nimbus" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockwebserver" }
bouncyCastle-bcpkixJdk18on = { module = "org.bouncycastle:bcpkix-jdk18on", version.ref = "bouncyCastle-jdk18on" }
mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "mockito" }
restAssured = { module = "io.rest-assured:rest-assured", version.ref = "restAssured" }
apache-sshd-core = { module = "org.apache.sshd:sshd-core", version.ref = "apache-sshd" }
apache-sshd-sftp = { module = "org.apache.sshd:sshd-sftp", version.ref = "apache-sshd" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
testcontainers-vault = { module = "org.testcontainers:vault", version.ref = "testcontainers" }
aws-s3 = { module = "software.amazon.awssdk:s3", version.ref = "aws" }
aws-s3transfer = { module = "software.amazon.awssdk:s3-transfer-manager", version.ref = "aws" }
jakarta-rsApi = { module = "jakarta.ws.rs:jakarta.ws.rs-api", version.ref = "rsApi" }
jakartaJson = { module = "org.glassfish:jakarta.json", version.ref = "jakarta-json" }
jacksonJsonP = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jakarta-jsonp", version.ref = "jackson" }
titaniumJsonLd = { module = "com.apicatalog:titanium-json-ld", version.ref = "titanium" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "jupiter" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
tink = { module = "com.google.crypto.tink:tink", version.ref = "tink" }
apicatalog-iron-vc = { module = "com.apicatalog:iron-verifiable-credentials", version.ref = "iron-vc" }

[bundles]
edc-connector = ["edc.boot", "edc.core-connector", "edc.core-controlplane", "edc.api-observability"]
edc-dpf = ["edc.dpf-transfer", "edc.dpf-selector-core", "edc.dpf-selector-client", "edc.spi-dataplane-selector"]
edc-sqlstores = ["edc.sql-assetindex", "edc.sql-contract-definition", "edc.sql-contract-negotiation", "edc.sql-transferprocess", "edc.sql-policydef"]
edc-monitoring = ["edc.micrometer-core", "edc.micrometer-jersey", "edc.micrometer-jetty"]
