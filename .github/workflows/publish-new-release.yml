---
name: "Publish new release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  secret-presence:
    name: Determine secret presence
    runs-on: ubuntu-latest
    outputs:
      CXNG_RELEASE_PAT: ${{ steps.secret-presence.outputs.CXNG_RELEASE_PAT }}
    steps:
      - name: Check whether secrets exist
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.CXNG_RELEASE_PAT }}" ] && echo "::set-output name=CXNG_RELEASE_PAT::true"

          exit 0

  release-version:
    name: Determine release version
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
    steps:
      -
        name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Output release version
        id: release-version
        run: |
          echo "::set-output name=RELEASE_VERSION::${{ env.RELEASE_VERSION }}"

  github-release:
    name: Publish new github release
    needs: [ secret-presence, release-version ]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && needs.secret-presence.outputs.CXNG_RELEASE_PAT && needs.release-version.outputs.RELEASE_VERSION
    steps:
      -
        name: Export RELEASE_VERSION env
        run: |
          echo "RELEASE_VERSION=${{ needs.release-version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          # 0 to fetch the full history due to upcoming merge of main into develop branch
          fetch-depth: 0
      -
        name: Create Release Tag
        id: create_release_tag
        run: |
          # Prepare git env
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag --force ${{ env.RELEASE_VERSION }}
          git push --force origin ${{ env.RELEASE_VERSION }}
      -
        name: Create Github Release
        id: create_release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.CXNG_RELEASE_PAT }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.3.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Merge main back into develop and set new snapshot version
        run: |
          # Prepare git env
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

          # Merge main into develop
          git checkout develop && git merge -X theirs main --no-commit --no-ff

          # Extract release version
          IFS=. read -r RELEASE_VERSION_MAJOR RELEASE_VERSION_MINOR RELEASE_VERSION_PATCH<<<"${{ env.RELEASE_VERSION }}"
          # Compute new snapshot version
          VERSION="$RELEASE_VERSION_MAJOR.$RELEASE_VERSION_MINOR.$((RELEASE_VERSION_PATCH+1))-SNAPSHOT"
          SNAPSHOT_VERSION=$VERSION

          # Persist new version into each pom
          ./mvnw -s settings.xml -B versions:set -DnewVersion="$SNAPSHOT_VERSION" -DprocessAllModules

          # Commit and push to origin develop
          git add $(find -name pom.xml)
          git commit --message "Introduce new snapshot version $SNAPSHOT_VERSION"

          git push origin develop

  helm-release:
    name: Publish new helm release
    needs: [ release-version ]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && needs.release-version.outputs.RELEASE_VERSION
    steps:
      -
        name: Export RELEASE_VERSION env
        run: |
          echo "RELEASE_VERSION=${{ needs.release-version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1
      -
        name: Package helm, update index.yaml and push to gh-pages
        run: |
          # Prepare git env
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

          # Package all charts
          find -name Chart.yaml | xargs -n1 dirname | xargs -n1 helm package -u -d helm-charts

          git checkout gh-pages || git checkout -b gh-pages
          git pull --rebase origin gh-pages

          # Generate helm repo index.yaml
          helm repo index . --merge index.yaml --url https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/

          # Commit and push to gh-pages
          git add index.yaml helm-charts
          git commit -s -m "Release ${{ env.RELEASE_VERSION }}"

          git push origin gh-pages
