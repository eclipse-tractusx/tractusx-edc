---
name: "Publish new release"

on:
  pull_request:
    branches:
      - releases
      - support/*
    types:
      - closed

jobs:
  # Gate: Check release version presence
  release-version:
    name: Determine release version
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
    steps:
      -
        name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Output release version
        id: release-version
        run: |
          echo "RELEASE_VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT

  # Release: Maven Artifacts
  maven-release:
    name: Publish extension's release version to maven repository
    needs: [ release-version ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event.pull_request.merged == true && needs.release-version.outputs.RELEASE_VERSION
    steps:
      -
        name: Export RELEASE_VERSION env
        run: |
          echo "RELEASE_VERSION=${{ needs.release-version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
      -
        uses: actions/checkout@v3.3.0
      -
        uses: ./.github/actions/setup-java

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v5
        env:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Publish release version
        run: |
          echo "Publishing Version $(grep -e "version" gradle.properties | cut -f2 -d"=") to Github Packages"
          ./gradlew publishAllPublicationsToGithubPackagesRepository
        env:
          REPO: ${{ github.repository }}
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  # Release: Helm Charts
  helm-release:
    name: Publish new helm release
    needs: [ release-version ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pages: write

    if: github.event.pull_request.merged == true && needs.release-version.outputs.RELEASE_VERSION
    steps:
      -
        name: Export RELEASE_VERSION env
        run: |
          echo "RELEASE_VERSION=${{ needs.release-version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
      -
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      -
        name: Install Helm
        uses: azure/setup-helm@v3.5
        with:
          version: v3.8.1
      -
        name: Package helm, update index.yaml and push to gh-pages
        run: |
          # Prepare git env
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

          # Package all charts
          find charts -name Chart.yaml -not -path "./edc-tests/*" | xargs -n1 dirname | xargs -n1 helm package -u -d helm-charts

          git checkout gh-pages || git checkout -b gh-pages
          git pull --rebase origin gh-pages

          # Generate helm repo index.yaml
          helm repo index . --merge index.yaml --url https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/

          # Commit and push to gh-pages
          git add index.yaml helm-charts
          git commit -s -m "Release ${{ env.RELEASE_VERSION }}"

          git push origin gh-pages

  # Release: GitHub tag & release; Merges back releases into main; Starts a new development cycle;
  github-release:
    name: Publish new github release
    needs: [ release-version ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pages: write
      pull-requests: write
    if: github.event.pull_request.merged == true && needs.release-version.outputs.RELEASE_VERSION
    steps:
      -
        name: Export RELEASE_VERSION env
        run: |
          echo "RELEASE_VERSION=${{ needs.release-version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
      -
        uses: actions/checkout@v3.3.0
        with:
          # 0 to fetch the full history due to upcoming merge of releases into main branch
          fetch-depth: 0
      -
        name: Create Release Tag
        id: create_release_tag
        run: |
          # Prepare git env
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag --force ${{ env.RELEASE_VERSION }}
          git push --force origin ${{ env.RELEASE_VERSION }}
      -
        name: Create Github Release
        id: create_release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      -
        uses: ./.github/actions/setup-java
      -
        name: Merge releases back into main and set new snapshot version
        if: github.event.pull_request.base.ref == 'releases'
        run: |
          # Prepare git env
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

          # Merge releases into main
          git checkout main && git merge -X theirs releases --no-commit --no-ff

          # Extract release version
          IFS=. read -r RELEASE_VERSION_MAJOR RELEASE_VERSION_MINOR RELEASE_VERSION_PATCH<<<"${{ env.RELEASE_VERSION }}"
          # Compute new snapshot version
          VERSION="$RELEASE_VERSION_MAJOR.$RELEASE_VERSION_MINOR.$((RELEASE_VERSION_PATCH+1))-SNAPSHOT"
          SNAPSHOT_VERSION=$VERSION

          # Persist the "version" in the gradle.properties
          sed -i "s/version=.*/version=$SNAPSHOT_VERSION/g" gradle.properties

          # Commit and push to origin main
          git add gradle.properties
          git commit --message "Introduce new snapshot version $SNAPSHOT_VERSION"

          git push origin main
