---
name: "Publish new release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          # 0 to fetch the full history due to upcoming merge of main into develop branch
          fetch-depth: 0
      -
        name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Create Release Tag
        run: |
          # Prepare git env
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag --force ${{ env.RELEASE_VERSION }}
          git push --force origin ${{ env.RELEASE_VERSION }}
      -
        name: Create Github Release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.3.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Merge main back into develop and set new snapshot version
        run: |
          # Prepare git env
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

          # Merge main into develop
          git checkout develop && git merge -X theirs main --no-commit --no-ff

          # Extract release version
          IFS=. read -r RELEASE_VERSION_MAJOR RELEASE_VERSION_MINOR RELEASE_VERSION_PATCH<<<"${{ env.RELEASE_VERSION }}"
          # Compute new snapshot version
          VERSION="$RELEASE_VERSION_MAJOR.$RELEASE_VERSION_MINOR.$((RELEASE_VERSION_PATCH+1))-SNAPSHOT"
          SNAPSHOT_VERSION=$VERSION

          # Persist new version into each pom
          ./mvnw -s settings.xml -B versions:set -DnewVersion="$SNAPSHOT_VERSION" -DprocessAllModules

          # Commit and push to origin develop
          git add $(find -name pom.xml)
          git commit --message "Introduce new snapshot version $SNAPSHOT_VERSION"

          git push origin develop
