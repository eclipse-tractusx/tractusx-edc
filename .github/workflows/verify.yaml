#################################################################################
#  Copyright (c) 2023 Mercedes-Benz Tech Innovation GmbH
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Verify"

on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  verify-helm-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run -v ${{ github.workspace }}/charts:/helm-docs jnorwood/helm-docs helm-docs
          
          if $(git diff --quiet --exit-code); then
            echo "Helm chart docs up to date"
          else
            echo "Helm chart docs not up to date:"
            git diff
            exit 1
          fi

  verify-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java
      - name: Run Checkstyle
        run: |
          ./gradlew checkstyleMain checkstyleTest
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

  verify-javadoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java

      - name: Run Javadoc
        run: ./gradlew javadoc
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - name: Run Unit tests
        run: ./gradlew test
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - name: Run Integration tests
        run: |
          ./gradlew :edc-tests:runtime:mock-connector:dockerize
          ./gradlew test -DincludeTags="ComponentTest"
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - name: Run API tests
        run: ./gradlew test -DincludeTags="ApiTest"
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

  prepare-end-to-end-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.outputStep.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: get api groups and create matrix for next job
        id: outputStep
        run: |
          DIRS=$(ls -l edc-tests/e2e | grep '^d' | awk '{print $9}' | sed ':a; N; $!ba; s/\n/","/g' | sed 's/.*/["&"]/')
          echo "matrix={\"dir\": ${DIRS}}" >> $GITHUB_OUTPUT

  end-to-end-tests:
    runs-on: ubuntu-latest
    needs: prepare-end-to-end-tests
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-end-to-end-tests.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java

      - name: Run E2E tests (${{ matrix.dir }})
        run: |
          ./gradlew compileJava compileTestJava
          ./gradlew -p edc-tests/e2e/${{ matrix.dir }} test -DincludeTags="EndToEndTest" -PverboseTest=true --no-build-cache
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

      - name: Set sanitized artifact name
        run: |
          SANITIZED_NAME=$(echo "edc-tests/e2e/${{ matrix.dir }}" | tr '/' '-')
          echo "ARTIFACT_NAME=${SANITIZED_NAME}" >> $GITHUB_ENV

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ env.ARTIFACT_NAME }}
          path: edc-tests/e2e/${{ matrix.dir }}/build/allure-results

  postgres-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java

      - name: Run Postgresql E2E tests
        run: ./gradlew test -DincludeTags="PostgresqlIntegrationTest" -PverboseTest=true
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

  generate-allure-report:
    runs-on: ubuntu-latest
    needs: end-to-end-tests
    if: ${{ github.ref_name == 'main' || startsWith(github.ref_name, 'release/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Output report version
        id: release-version
        run: |
          VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')
          
          # if it contains "SNAPSHOT", output "main", otherwise the real version
          if [[ "$VERSION" == *SNAPSHOT* ]]; then
            echo "RELEASE_VERSION=main" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Generate and publish Allure report
        uses: ./.github/actions/generate-and-publish-allure-report
        with:
          version: ${{ steps.release-version.outputs.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allure_results: allure-results
