#
#  Copyright (c) 2023 Mercedes-Benz Tech Innovation GmbH
#  Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#

---
name: "Verify"

on:
  push:
    branches:
      - main
      - releases
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
      - published
  pull_request:
    paths-ignore:
      - 'charts/**'
  workflow_dispatch:

concurrency:
  # cancel older running jobs on the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  
  verify-license-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.2
      - name: "Check for files without a license header"
        run: |-
          # checks all java, yaml, kts and sql files for an Apache 2.0 license header
          cmd="grep -riL \"SPDX-License-Identifier: Apache-2.0\" --include=\*.{java,yaml,yml,kts,sql} --exclude-dir={.gradle,\*\openapi} ."
          violations=$(eval $cmd | wc -l)
          if [[ $violations -ne 0 ]] ; then
            echo "$violations files without license headers were found:";
            eval $cmd;
            exit 1;
          fi
  
  verify-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.2

      - uses: ./.github/actions/setup-java
      - name: Verify proper formatting
        run: ./gradlew spotlessCheck

      - name: Run Checkstyle
        run: |
          ./gradlew checkstyleMain checkstyleTest

  markdown-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.2

      - name: Install mardkdownlint
        run: npm install -g markdownlint-cli2

      - name: Run markdownlint
        run: |
          markdownlint-cli2-config .markdownlint.yaml "**/*.md" "#.github" "#charts"

  unit-tests:
    runs-on: ubuntu-latest
    needs: [ verify-formatting, verify-license-headers ]
    steps:
      - uses: actions/checkout@v3.5.2

      - uses: ./.github/actions/setup-java

      - name: Run Unit tests
        run: ./gradlew test

  integration-tests:
    runs-on: ubuntu-latest
    needs: [ verify-formatting, verify-license-headers ]
    steps:
      - uses: actions/checkout@v3.5.2

      - uses: ./.github/actions/setup-java

      - name: Run Integration tests
        run: ./gradlew test -DincludeTags="ComponentTest"

  api-tests:
    runs-on: ubuntu-latest
    needs: [ verify-formatting, verify-license-headers ]
    steps:
      - uses: actions/checkout@v3.5.2

      - uses: ./.github/actions/setup-java

      - name: Run API tests
        run: ./gradlew test -DincludeTags="ApiTest"

  end-to-end-tests:
    runs-on: ubuntu-latest
    needs: [ verify-formatting, verify-license-headers ]
    steps:
      - uses: actions/checkout@v3.5.2

      - uses: ./.github/actions/setup-java

      - name: Run E2E tests
        run: ./gradlew test -DincludeTags="EndToEndTest"

  postgres-tests:
    runs-on: ubuntu-latest
    needs: [ verify-formatting ]

    services:
      postgres:
        image: postgres:14.2
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-java

      # create non-default schema name to test usage of non-default schema
      - name: setup postgres schema
        run: |
          sudo apt update
          sudo apt install --yes postgresql-client
          psql -h localhost -d postgres -U postgres -c 'CREATE SCHEMA testschema;'
        env:
          PGPASSWORD: password

      - name: Run Postgresql E2E tests
        run: ./gradlew test -DincludeTags="PostgresqlIntegrationTest"
