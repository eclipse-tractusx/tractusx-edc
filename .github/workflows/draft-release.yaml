#################################################################################
#  Copyright (c) 2025 Cofinity-X GmbH
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Draft Release"
run-name: "Draft ${{ inputs.release_type }} from ${{ github.ref_name }}"

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: 'The release type you want to release. Ref should be either main for "release candidate" or a branch for "bugfix" and "official release". '
        required: true
        options:
          - release candidate
          - bugfix
          - official release

jobs:
  validate-and-prepare:
    name: "Validate that tag does not already exist and prepare branch"
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || startsWith(github.ref_name, 'release/') }}
    outputs:
      version: ${{ steps.resolve_version.outputs.version }}
      branch_name: ${{ steps.resolve_branch.outputs.branch_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: validation
        name: "Validate the correct relation between release_type and github.ref_name"
        run: |
          if [[ !(${{ github.ref_name }} == "main" && "${{ inputs.release_type }}" == "release candidate")
            && !(${{ github.ref_name }} == release/* && ${{ github.ref_name }} != *rc* && "${{ inputs.release_type }}" == "bugfix")
            && !(${{ github.ref_name }} == release/* && ${{ github.ref_name }} == *rc* && "${{ inputs.release_type }}" == "official release")]]
          then
            echo "Ref branch does not match required criteria. Should either be "main" for "release candidate" type, a release branch for "bugfix" type or a release rc branch for "official release" type."
            exit 1
          fi
      - id: resolve_version
        name: "Resolve release version basing on release type"
        uses: ./.github/actions/resolve-version
        with:
          release_type: ${{ inputs.release_type }}
      - id: check-tag
        name: "Check if tag exists"
        run: |-

          tag=$(git tag -l ${{ steps.resolve_version.outputs.version }})

          if [ ! -z $tag ];
          then
            echo "Tag ${{ steps.resolve_version.outputs.version }} already exists!"
            exit 1
          fi
      - id: resolve_branch
        name: "Resolve branch name"
        run: |
          echo "branch_name=release/${{ steps.resolve_version.outputs.version }}" >> "$GITHUB_OUTPUT"

  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - uses: actions/checkout@v4
      - name: Create Release branch
        run: git checkout -b ${{ needs.validate-and-prepare.outputs.branch_name }}
      - uses: ./.github/actions/setup-java
      - name: Check dependencies before release
        uses: ./.github/actions/generate-and-check-dependencies
        with:
          run: strict
      - name: Replace published DEPENDENCIES file link in NOTICE with the one just created
        run: sed -i "s#\[DEPENDENCIES\]\(.*\)#\[DEPENDENCIES\]\(DEPENDENCIES\)#g" NOTICE.md
      - name: Version and Chart Updates
        uses: ./.github/actions/update-version-and-charts
        with:
          version: ${{ needs.validate-and-prepare.outputs.version }}
      - name: Push new branch
        run: git push origin ${{ needs.validate-and-prepare.outputs.branch_name }}

  run-all-tests:
    name: "Run All Tests"
    needs: [ validate-and-prepare, draft-new-release ]
    uses: ./.github/workflows/run-all-tests.yml
    with:
      branch: ${{ needs.validate-and-prepare.outputs.branch_name }}
