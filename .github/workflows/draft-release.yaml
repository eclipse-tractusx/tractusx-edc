#################################################################################
#  Copyright (c) 2025 Cofinity-X GmbH
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Draft Release"
run-name: "Draft ${{ inputs.version }} from ${{ github.ref_name }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release.'
        required: true

jobs:
  validate-and-prepare:
    name: "Validate that tag does not already exist and prepare branch"
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || github.ref_type == 'tag'  }}
    outputs:
      branch_name: ${{ steps.resolve_branch.outputs.branch_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: validation
        name: "Validations"
        run: |
          IFS=.- read -r MAJOR_INPUT MINOR_INPUT PATCH_INPUT SNAPSHOT_INPUT<<<"${{ inputs.version }}" 

          VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')
          IFS=.- read -r MAJOR MINOR PATCH SNAPSHOT<<<"$VERSION" 

          # Release Candidate    
          if [[ ! -z $SNAPSHOT_INPUT ]] then
            if [[ -z $SNAPSHOT ]] then
              echo "You want to build a release candidate, but the selected commit is neither on main nor a release candidate."
            exit 1
            fi

          # Bugfix
          elif [[ -z $SNAPSHOT_INPUT && $PATCH_INPUT != '0' ]] then 
            if [[ ${{ github.ref_type }}  != 'tag'  || ! -z $SNAPSHOT  ]] then
              echo "You want to build a bugfix, but the selected commit is neither a bugfix nor an official release"
            exit 1
            fi

          # Official Release
          elif [[ -z $SNAPSHOT_INPUT && $PATCH_INPUT == '0' ]] then
            if [[ ${{ github.ref_type }} != 'tag' || $SNAPSHOT != *rc* ]] then
              echo "You want to build an official release, but the selected commit is not a release candidate"
            exit 1
            fi
          fi
      - id: check-tag
        name: "Check if tag exists"
        run: |-

          tag=$(git tag -l ${{ inputs.version }})

          if [ ! -z $tag ];
          then
            echo "Tag ${{ inputs.version }} already exists! Please choose another tag."
            exit 1
          fi
      - id: resolve_branch
        name: "Resolve branch name"
        run: |
          echo "branch_name=release/${{ inputs.version }}" >> "$GITHUB_OUTPUT"

  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - uses: actions/checkout@v4
      - name: Create Release branch
        run: git checkout -b ${{ needs.validate-and-prepare.outputs.branch_name }}
      - uses: ./.github/actions/setup-java
      - name: Check dependencies before release
        uses: ./.github/actions/generate-and-check-dependencies
        with:
          run: strict
      - name: Replace published DEPENDENCIES file link in NOTICE with the one just created
        run: sed -i "s#\[DEPENDENCIES\]\(.*\)#\[DEPENDENCIES\]\(DEPENDENCIES\)#g" NOTICE.md
      - name: Version and Chart Updates
        uses: ./.github/actions/update-version-and-charts
        with:
          version: ${{ inputs.version }}
          bump_version: "false"
      - name: Push new branch
        run: git push origin ${{ needs.validate-and-prepare.outputs.branch_name }}
