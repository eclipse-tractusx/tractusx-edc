---
name: "Build"

on:
  push:
    branches:
      - main
      - develop
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
      - released
  pull_request:
    paths-ignore:
      - 'deployment/helm/**'
    branches:
      - '*'

jobs:
  secret-presence:
    runs-on: ubuntu-latest
    outputs:
      CXNG_GHCR_PAT: ${{ steps.secret-presence.outputs.CXNG_GHCR_PAT }}
      ORG_VERACODE_API_ID: ${{ steps.secret-presence.outputs.ORG_VERACODE_API_ID }}
      ORG_VERACODE_API_KEY: ${{ steps.secret-presence.outputs.ORG_VERACODE_API_KEY }}
      SONAR_TOKEN: ${{ steps.secret-presence.outputs.SONAR_TOKEN }}
    steps:
      -
        name: Check whether secrets exist
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.CXNG_GHCR_PAT }}" ] && echo "::set-output name=CXNG_GHCR_PAT::true"
          [ ! -z "${{ secrets.ORG_VERACODE_API_ID }}" ] && echo "::set-output name=ORG_VERACODE_API_ID::true"
          [ ! -z "${{ secrets.ORG_VERACODE_API_KEY }}" ] && echo "::set-output name=ORG_VERACODE_API_KEY::true"
          [ ! -z "${{ secrets.SONAR_TOKEN }}" ] && echo "::set-output name=SONAR_TOKEN::true"
          exit 0

  verify-formatting:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.4.1
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Verify proper formatting
        run: ./mvnw -s settings.xml -B spotless:check

  sonar:
    needs: [ secret-presence, verify-formatting ]
    if: |
      needs.secret-presence.outputs.SONAR_TOKEN
    runs-on: ubuntu-latest
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.3.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Build edc with Gradle to get latest snapshots
        run: ./gradlew publishToMavenLocal
        working-directory: edc
      -
        name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # Analyse
      -
        name: Build with Maven and analyze with Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |-
          ./mvnw -s settings.xml -B clean verify sonar:sonar \
            -Pcoverage,failsafe \
            -Dsonar.projectKey=${GITHUB_REPOSITORY_OWNER}_product-edc \
            -Dsonar.organization=${GITHUB_REPOSITORY_OWNER} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=${GITHUB_WORKSPACE}/edc-tests/target/site/jacoco-aggregate/jacoco.xml \
            -Dsonar.verbose=true

  #################################
  ### edc-dataplane-azure-vault ###
  #################################
  build-edc-dataplane-azure-vault:
    needs: [ secret-presence, verify-formatting ]
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to GitHub Container Registry
      if: |
        needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.4.1
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-dataplane-azure-vault
      run: |-
        ./mvnw -Pfailsafe -s settings.xml -B -pl .,edc-dataplane/edc-dataplane-azure-vault -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-dataplane-azure-vault Docker Metadata
      id: edc_dataplane_azure_vault_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ github.repository }}/edc-dataplane-azure-vault
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-dataplane-azure-vault Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: edc-dataplane/edc-dataplane-azure-vault/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-dataplane/edc-dataplane-azure-vault/target/edc-dataplane-azure-vault.jar
          LIB=edc-dataplane/edc-dataplane-azure-vault/target/lib
        push: |
          ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
        tags: ${{ steps.edc_dataplane_azure_vault_meta.outputs.tags }}
        labels: ${{ steps.edc_dataplane_azure_vault_meta.outputs.labels }}
    -
      name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@v1.0
      if: |
        needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
          refs/heads/develop
          refs/heads/release/
          refs/tags/
          refs/heads/main', github.ref)
      continue-on-error: true
      with:
        appname: 'product-edc/edc-dataplane-azure-vault'
        createprofile: true
        version: ${{ github.ref }}-${{ github.sha }}
        filepath: edc-dataplane/edc-dataplane-azure-vault/target/edc-dataplane-azure-vault.jar
        vid: ${{ secrets.ORG_VERACODE_API_ID }}
        vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  #####################################
  ### edc-dataplane-hashicorp-vault ###
  #####################################
  build-edc-dataplane-hashicorp-vault:
    needs: [ secret-presence, verify-formatting ]
    runs-on: ubuntu-latest
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      -
        name: Login to GitHub Container Registry
        if: |
          needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.4.1
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Build edc with Gradle to get latest snapshots
        run: ./gradlew publishToMavenLocal
        working-directory: edc
      # Build
      -
        name: Build edc-dataplane-hashicorp-vault
        run: |-
          ./mvnw -s settings.xml -B -pl .,edc-dataplane/edc-dataplane-hashicorp-vault -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: edc-dataplane-hashicorp-vault Docker Metadata
        id: edc_dataplane_hashicorp_vault_metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/edc-dataplane-hashicorp-vault
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=match,pattern=\d.\d.\d
            type=sha
      -
        name: Build edc-dataplane-hashicorp-vault Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: edc-dataplane/edc-dataplane-hashicorp-vault/src/main/docker/Dockerfile
          build-args: |
            JAR=edc-dataplane/edc-dataplane-hashicorp-vault/target/edc-dataplane-hashicorp-vault.jar
            LIB=edc-dataplane/edc-dataplane-hashicorp-vault/target/lib
          push: |
            ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
          tags: ${{ steps.edc_dataplane_hashicorp_vault_metadata.outputs.tags }}
          labels: ${{ steps.edc_dataplane_hashicorp_vault_metadata.outputs.labels }}
      -
        name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@v1.0
        if: |
          needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
            refs/heads/develop
            refs/heads/release/
            refs/tags/
            refs/heads/main', github.ref)
        continue-on-error: true
        with:
          appname: 'product-edc/edc-dataplane-hashicorp-vault'
          createprofile: true
          version: ${{ github.ref }}-${{ github.sha }}
          filepath: edc-dataplane/edc-dataplane-hashicorp-vault/target/edc-dataplane-hashicorp-vault.jar
          vid: ${{ secrets.ORG_VERACODE_API_ID }}
          vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  ###############################
  ### edc-controlplane-memory ###
  ###############################
  build-edc-controlplane-memory:
    needs: [ secret-presence, verify-formatting ]
    runs-on: ubuntu-latest
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      -
        name: Login to GitHub Container Registry
        if: |
          needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.4.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Build edc with Gradle to get latest snapshots
        run: ./gradlew publishToMavenLocal
        working-directory: edc
      # Build
      -
        name: Build edc-controlplane-memory
        run: |-
          ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-memory -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: edc-controlplane-memory Docker Metadata
        id: edc_controlplane_memory_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/edc-controlplane-memory
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=match,pattern=\d.\d.\d
            type=sha
      -
        name: Build edc-controlplane-memory Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: edc-controlplane/edc-controlplane-memory/src/main/docker/Dockerfile
          build-args: |
            JAR=edc-controlplane/edc-controlplane-memory/target/edc-controlplane-memory.jar
            LIB=edc-controlplane/edc-controlplane-memory/target/lib
          push: |
            ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
          tags: ${{ steps.edc_controlplane_memory_meta.outputs.tags }}
          labels: ${{ steps.edc_controlplane_memory_meta.outputs.labels }}
      -
        name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@v1.0
        if: |
          needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
            refs/heads/develop
            refs/heads/release/
            refs/tags/
            refs/heads/main', github.ref)
        continue-on-error: true
        with:
          appname: 'product-edc/edc-controlplane-memory'
          createprofile: true
          version: ${{ github.ref }}-${{ github.sha }}
          filepath: edc-controlplane/edc-controlplane-memory/target/edc-controlplane-memory.jar
          vid: ${{ secrets.ORG_VERACODE_API_ID }}
          vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  ###################################
  ### edc-controlplane-postgresql ###
  ###################################
  build-edc-controlplane-postgresql:
    needs: [ secret-presence, verify-formatting ]
    runs-on: ubuntu-latest
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      -
        name: Login to Github Packages
        if: |
          needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.4.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Build edc with Gradle to get latest snapshots
        run: ./gradlew publishToMavenLocal
        working-directory: edc
      # Build
      -
        name: Build edc-controlplane-postgresql
        run: |-
          ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-postgresql -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: edc-controlplane-postgresql Docker Metadata
        id: edc_controlplane_postgresql_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/edc-controlplane-postgresql
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=match,pattern=\d.\d.\d
            type=sha
      -
        name: Build edc-controlplane-postgresql Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: edc-controlplane/edc-controlplane-postgresql/src/main/docker/Dockerfile
          build-args: |
            JAR=edc-controlplane/edc-controlplane-postgresql/target/edc-controlplane-postgresql.jar
            LIB=edc-controlplane/edc-controlplane-postgresql/target/lib
          push: |
            ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
          tags: ${{ steps.edc_controlplane_postgresql_meta.outputs.tags }}
          labels: ${{ steps.edc_controlplane_postgresql_meta.outputs.labels }}
      -
        name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@v1.0
        if: |
          needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
            refs/heads/develop
            refs/heads/release/
            refs/tags/
            refs/heads/main', github.ref)
        continue-on-error: true
        with:
          appname: 'product-edc/edc-controlplane-postgresql'
          createprofile: true
          filepath: edc-controlplane/edc-controlplane-postgresql/target/edc-controlplane-postgresql.jar
          version: ${{ github.ref_name }}-${{ github.sha }}
          vid: ${{ secrets.ORG_VERACODE_API_ID }}
          vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  ###################################################
  ### edc-controlplane-postgresql-hashicorp-vault ###
  ###################################################
  build-edc-controlplane-postgresql-hashicorp-vault:
    needs: [ secret-presence, verify-formatting ]
    runs-on: ubuntu-latest
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      -
        name: Login to Github Packages
        if: |
          needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.4.1
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Build edc with Gradle to get latest snapshots
        run: ./gradlew publishToMavenLocal
        working-directory: edc
      # Build
      -
        name: Build edc-controlplane-postgresql-hashicorp-vault
        run: |-
          ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-postgresql-hashicorp-vault -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: edc-controlplane-postgresql-hashicorp-vault Docker Metadata
        id: edc_controlplane_postgresql_hashicorp_vault_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/edc-controlplane-postgresql-hashicorp-vault
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=match,pattern=\d.\d.\d
            type=sha
      -
        name: Build edc-controlplane-postgresql-hashicorp-vault Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: edc-controlplane/edc-controlplane-postgresql-hashicorp-vault/src/main/docker/Dockerfile
          build-args: |
            JAR=edc-controlplane/edc-controlplane-postgresql-hashicorp-vault/target/edc-controlplane-postgresql-hashicorp-vault.jar
            LIB=edc-controlplane/edc-controlplane-postgresql-hashicorp-vault/target/lib
          push: |
            ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
          tags: ${{ steps.edc_controlplane_postgresql_hashicorp_vault_meta.outputs.tags }}
          labels: ${{ steps.edc_controlplane_postgresql_hashicorp_vault_meta.outputs.labels }}
      -
        name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@v1.0
        if: |
          needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
            refs/heads/develop
            refs/heads/release/
            refs/tags/
            refs/heads/main', github.ref)
        continue-on-error: true
        with:
          appname: 'product-edc/edc-controlplane-postgresql-hashicorp-vault'
          createprofile: true
          filepath: edc-controlplane/edc-controlplane-postgresql-hashicorp-vault/target/edc-controlplane-postgresql-hashicorp-vault.jar
          version: ${{ github.ref_name }}-${{ github.sha }}
          vid: ${{ secrets.ORG_VERACODE_API_ID }}
          vkey: ${{ secrets.ORG_VERACODE_API_KEY }}
