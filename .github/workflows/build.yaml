---
name: "Build"

on:
  push:
    branches:
      - main
      - develop
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
      - released
  pull_request:
    paths-ignore:
      - 'deployment/helm/**'
    branches:
      - '*'

jobs:
  secret-presence:
    runs-on: ubuntu-latest
    outputs:
      CXNG_GHCR_PAT: ${{ steps.secret-presence.outputs.CXNG_GHCR_PAT }}
      ORG_VERACODE_API_ID: ${{ steps.secret-presence.outputs.ORG_VERACODE_API_ID }}
      ORG_VERACODE_API_KEY: ${{ steps.secret-presence.outputs.ORG_VERACODE_API_KEY }}
    steps:
      - name: Check whether secrets exist
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.CXNG_GHCR_PAT }}" ] && echo "::set-output name=CXNG_GHCR_PAT::true"
          [ ! -z "${{ secrets.ORG_VERACODE_API_ID }}" ] && echo "::set-output name=ORG_VERACODE_API_ID::true"
          [ ! -z "${{ secrets.ORG_VERACODE_API_KEY }}" ] && echo "::set-output name=ORG_VERACODE_API_KEY::true"

          exit 0
  #####################
  ### edc-dataplane ###
  #####################
  build-edc-dataplane:
    needs: [ secret-presence ]
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to GitHub Container Registry
      if: |
        needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-dataplane
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-dataplane -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-dataplane Docker Metadata
      id: edc_dataplane_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ github.repository }}/edc-dataplane
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-dataplane Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: edc-dataplane/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-dataplane/target/edc-dataplane.jar
          LIB=edc-dataplane/target/lib
        push: |
          ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
        tags: ${{ steps.edc_dataplane_meta.outputs.tags }}
        labels: ${{ steps.edc_dataplane_meta.outputs.labels }}
    -
      name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@v1.0
      if: |
        needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
          refs/heads/develop
          refs/heads/release/
          refs/tags/
          refs/heads/main', github.ref)
      continue-on-error: true
      with:
        appname: 'product-edc/edc-dataplane'
        createprofile: true
        version: ${{ github.ref }}-${{ github.sha }}
        filepath: edc-dataplane/target/edc-dataplane.jar
        vid: ${{ secrets.ORG_VERACODE_API_ID }}
        vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  ###############################
  ### edc-controlplane-memory ###
  ###############################
  build-edc-controlplane-memory:
    needs: [ secret-presence ]
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to GitHub Container Registry
      if: |
        needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-controlplane-memory
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-memory -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-controlplane-memory Docker Metadata
      id: edc_controlplane_memory_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ github.repository }}/edc-controlplane-memory
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-controlplane-memory Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: edc-controlplane/edc-controlplane-memory/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-controlplane/edc-controlplane-memory/target/edc-controlplane-memory.jar
          LIB=edc-controlplane/edc-controlplane-memory/target/lib
        push: |
          ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
        tags: ${{ steps.edc_controlplane_memory_meta.outputs.tags }}
        labels: ${{ steps.edc_controlplane_memory_meta.outputs.labels }}
    -
      name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@v1.0
      if: |
        needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
          refs/heads/develop
          refs/heads/release/
          refs/tags/
          refs/heads/main', github.ref)
      continue-on-error: true
      with:
        appname: 'product-edc/edc-controlplane-memory'
        createprofile: true
        version: ${{ github.ref }}-${{ github.sha }}
        filepath: edc-controlplane/edc-controlplane-memory/target/edc-controlplane-memory.jar
        vid: ${{ secrets.ORG_VERACODE_API_ID }}
        vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  #################################
  ### edc-controlplane-cosmosdb ###
  #################################
  build-edc-controlplane-cosmosdb:
    needs: [ secret-presence ]
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to GitHub Container Registry
      if: |
        needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-controlplane-cosmosdb
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-cosmosdb -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-controlplane-cosmosdb Docker Metadata
      id: edc_controlplane_cosmosdb_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ github.repository }}/edc-controlplane-cosmosdb
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-controlplane-cosmosdb Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: edc-controlplane/edc-controlplane-cosmosdb/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-controlplane/edc-controlplane-cosmosdb/target/edc-controlplane-cosmosdb.jar
          LIB=edc-controlplane/edc-controlplane-cosmosdb/target/lib
        push: |
          ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
        tags: ${{ steps.edc_controlplane_cosmosdb_meta.outputs.tags }}
        labels: ${{ steps.edc_controlplane_cosmosdb_meta.outputs.labels }}
    -
      name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@v1.0
      if: |
        needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
          refs/heads/develop
          refs/heads/release/
          refs/tags/
          refs/heads/main', github.ref)
      continue-on-error: true
      with:
        appname: 'product-edc/edc-controlplane-cosmosdb'
        createprofile: true
        filepath: edc-controlplane/edc-controlplane-cosmosdb/target/edc-controlplane-cosmosdb.jar
        version: ${{ github.ref }}-${{ github.sha }}
        vid: ${{ secrets.ORG_VERACODE_API_ID }}
        vkey: ${{ secrets.ORG_VERACODE_API_KEY }}

  ###################################
  ### edc-controlplane-postgresql ###
  ###################################
  build-edc-controlplane-postgresql:
    needs: [ secret-presence ]
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to Github Packages
      if: |
        needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-controlplane-postgresql
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-postgresql -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-controlplane-postgresql Docker Metadata
      id: edc_controlplane_postgresql_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ github.repository }}/edc-controlplane-postgresql
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-controlplane-postgresql Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: edc-controlplane/edc-controlplane-postgresql/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-controlplane/edc-controlplane-postgresql/target/edc-controlplane-postgresql.jar
          LIB=edc-controlplane/edc-controlplane-postgresql/target/lib
        push: |
          ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
        tags: ${{ steps.edc_controlplane_postgresql_meta.outputs.tags }}
        labels: ${{ steps.edc_controlplane_postgresql_meta.outputs.labels }}
    -
      name: Veracode Upload And Scan
      uses: veracode/veracode-uploadandscan-action@v1.0
      if: |
        needs.secret-presence.outputs.ORG_VERACODE_API_ID && needs.secret-presence.outputs.ORG_VERACODE_API_KEY && contains('
          refs/heads/develop
          refs/heads/release/
          refs/tags/
          refs/heads/main', github.ref)
      continue-on-error: true
      with:
        appname: 'product-edc/edc-controlplane-postgresql'
        createprofile: true
        filepath: edc-controlplane/edc-controlplane-postgresql/target/edc-controlplane-postgresql.jar
        version: ${{ github.ref_name }}-${{ github.sha }}
        vid: ${{ secrets.ORG_VERACODE_API_ID }}
        vkey: ${{ secrets.ORG_VERACODE_API_KEY }}
