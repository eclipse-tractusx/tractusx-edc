---
name: "Build"

on:
  push:
    branches:
      - main
      - develop
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
      - published
  pull_request:
    paths-ignore:
      - 'charts/**'
      - 'docs/**'
      - '**/*.md'
    branches:
      - '*'
  workflow_dispatch:

jobs:
  secret-presence:
    runs-on: ubuntu-latest
    outputs:
      CXNG_GHCR_PAT: ${{ steps.secret-presence.outputs.CXNG_GHCR_PAT }}
      SONAR_TOKEN: ${{ steps.secret-presence.outputs.SONAR_TOKEN }}
    steps:
      -
        name: Check whether secrets exist
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.CXNG_GHCR_PAT }}" ] && echo "::set-output name=CXNG_GHCR_PAT::true"
          [ ! -z "${{ secrets.SONAR_TOKEN }}" ] && echo "::set-output name=SONAR_TOKEN::true"
          exit 0
  verify-formatting:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Verify proper formatting
        run: ./mvnw -s settings.xml -B spotless:check

  sonar:
    needs: [ secret-presence, verify-formatting ]
    if: |
      needs.secret-presence.outputs.SONAR_TOKEN
    runs-on: ubuntu-latest
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # Analyse
      -
        name: Build with Maven and analyze with Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |-
          ./mvnw -s settings.xml -B clean verify sonar:sonar \
            -Pcoverage,failsafe \
            -Dsonar.projectKey=${GITHUB_REPOSITORY_OWNER}_product-edc \
            -Dsonar.organization=${GITHUB_REPOSITORY_OWNER} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=${GITHUB_WORKSPACE}/edc-tests/target/site/jacoco-aggregate/jacoco.xml \
            -Dsonar.verbose=true
  build-extensions:
    runs-on: ubuntu-latest
    needs: [ secret-presence, verify-formatting ]
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3.3.0
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      # Build
      -
        name: Build Extensions
        run: |-
          ./mvnw -s settings.xml -B -f edc-extensions -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}

  build-controlplane:
    runs-on: ubuntu-latest
    needs: [ secret-presence, verify-formatting ]
    strategy:
      fail-fast: false
      matrix:
        name:
          - edc-controlplane-memory
          - edc-controlplane-postgresql
          - edc-controlplane-postgresql-hashicorp-vault
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3.3.0
      -
        name: Login to GitHub Container Registry
        if: |
          needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      # Build
      -
        name: Build Controlplane
        run: |-
          ./mvnw -s settings.xml -B -pl .,edc-controlplane/${{ matrix.name }} -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: edc-controlplane Docker Metadata
        id: edc_controlplane_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/${{ matrix.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=match,pattern=\d.\d.\d
            type=sha
      -
        name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: edc-controlplane/${{ matrix.name }}/src/main/docker/Dockerfile
          build-args: |
            JAR=edc-controlplane/${{ matrix.name }}/target/${{ matrix.name }}.jar
            LIB=edc-controlplane/${{ matrix.name }}/target/lib
          push: |
            ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
          tags: ${{ steps.edc_controlplane_meta.outputs.tags }}
          labels: ${{ steps.edc_controlplane_meta.outputs.labels }}

  build-dataplane:
    runs-on: ubuntu-latest
    needs: [ secret-presence, verify-formatting ]
    strategy:
      fail-fast: false
      matrix:
        name:
          - edc-dataplane-azure-vault
          - edc-dataplane-hashicorp-vault
    steps:
      # Set-Up
      -
        name: Checkout
        uses: actions/checkout@v3.3.0
      -
        name: Login to GitHub Container Registry
        if: |
          needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: Set up JDK 11
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      # Build
      -
        name: Build Dataplane
        run: |-
          ./mvnw -s settings.xml -B -pl .,edc-dataplane/${{ matrix.name }} -am package
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
      -
        name: edc-dataplane Docker Metadata
        id: edc_dataplane_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/${{ matrix.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=match,pattern=\d.\d.\d
            type=sha
      -
        name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: edc-dataplane/${{ matrix.name }}/src/main/docker/Dockerfile
          build-args: |
            JAR=edc-dataplane/${{ matrix.name }}/target/${{ matrix.name }}.jar
            LIB=edc-dataplane/${{ matrix.name }}/target/lib
          push: |
            ${{ (needs.secret-presence.outputs.CXNG_GHCR_PAT && github.event_name != 'pull_request' && 'true') || 'false' }}
          tags: ${{ steps.edc_dataplane_meta.outputs.tags }}
          labels: ${{ steps.edc_dataplane_meta.outputs.labels }}
