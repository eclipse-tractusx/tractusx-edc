---
name: "Build"

on:
  push:
    branches:
      - main
      - develop
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - '*'

jobs:
  #####################
  ### edc-dataplane ###
  #####################
  build-edc-dataplane:
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to Github Packages
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-dataplane
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-dataplane -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-dataplane Docker Metadata
      id: edc_dataplane_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/catenax-ng/product-edc/edc-dataplane
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-dataplane Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: edc-dataplane/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-dataplane/target/edc-dataplane.jar
        push: ${{ github.event_name != 'pull_request' && github.repository_owner == 'product-edc' }}
        tags: ${{ steps.edc_dataplane_meta.outputs.tags }}
        labels: ${{ steps.edc_dataplane_meta.outputs.labels }}

  #################################
  ### edc-controlplane-memory ###
  #################################
  build-edc-controlplane-memory:
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to Github Packages
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-controlplane-memory
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-memory -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-controlplane-memory Docker Metadata
      id: edc_controlplane_memory_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/catenax-ng/product-edc/edc-controlplane-memory
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-controlplane-memory Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: edc-controlplane/edc-controlplane-memory/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-controlplane/edc-controlplane-memory/target/edc-controlplane-memory.jar
        push: ${{ github.event_name != 'pull_request' && github.repository == 'catenax-ng/product-edc' }}
        tags: ${{ steps.edc_controlplane_memory_meta.outputs.tags }}
        labels: ${{ steps.edc_controlplane_memory_meta.outputs.labels }}

  #################################
  ### edc-controlplane-cosmosdb ###
  #################################
  build-edc-controlplane-cosmosdb:
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to Github Packages
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-controlplane-cosmosdb
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-cosmosdb -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-controlplane-cosmosdb Docker Metadata
      id: edc_controlplane_cosmosdb_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/catenax-ng/product-edc/edc-controlplane-cosmosdb
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-controlplane-cosmosdb Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: edc-controlplane/edc-controlplane-cosmosdb/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-controlplane/edc-controlplane-cosmosdb/target/edc-controlplane-cosmosdb.jar
        push: ${{ github.event_name != 'pull_request' && github.repository == 'catenax-ng/product-edc' }}
        tags: ${{ steps.edc_controlplane_cosmosdb_meta.outputs.tags }}
        labels: ${{ steps.edc_controlplane_cosmosdb_meta.outputs.labels }}

  ###################################
  ### edc-controlplane-postgresql ###
  ###################################
  build-edc-controlplane-postgresql:
    runs-on: ubuntu-latest
    steps:
    # Set-Up
    -
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    -
      name: Login to Github Packages
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: Set up JDK 11
      uses: actions/setup-java@v3.3.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
    -
      name: Build edc with Gradle to get latest snapshots
      run: ./gradlew publishToMavenLocal
      working-directory: edc
    # Build
    -
      name: Build edc-controlplane-postgresql
      run: |-
        ./mvnw -s settings.xml -B -pl .,edc-controlplane/edc-controlplane-postgresql -am verify
      env:
        GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
        GITHUB_PACKAGE_PASSWORD: ${{ secrets.CXNG_GHCR_PAT }}
    -
      name: edc-controlplane-postgresql Docker Metadata
      id: edc_controlplane_postgresql_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/catenax-ng/product-edc/edc-controlplane-postgresql
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=match,pattern=\d.\d.\d
          type=sha
    -
      name: Build edc-controlplane-postgresql Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: edc-controlplane/edc-controlplane-postgresql/src/main/docker/Dockerfile
        build-args: |
          JAR=edc-controlplane/edc-controlplane-postgresql/target/edc-controlplane-postgresql.jar
        push: ${{ github.event_name != 'pull_request' && github.repository == 'catenax-ng/product-edc' }}
        tags: ${{ steps.edc_controlplane_postgresql_meta.outputs.tags }}
        labels: ${{ steps.edc_controlplane_postgresql_meta.outputs.labels }}
