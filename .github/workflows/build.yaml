#
#  Copyright (c) 2023 ZF Friedrichshafen AG
#  Copyright (c) 2023 Mercedes-Benz Tech Innovation GmbH
#  Copyright (c) 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#

---
name: "Build"

on:
  push:
    branches:
      - main
      - releases
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
      - published
  pull_request:
    paths-ignore:
      - 'charts/**'
      - 'docs/**'
      - '**/*.md'
    branches:
      - '*'
  workflow_dispatch:


concurrency:
  # cancel only running jobs on pull requests
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  secret-presence:
    runs-on: ubuntu-latest
    outputs:
      SONAR_TOKEN: ${{ steps.secret-presence.outputs.SONAR_TOKEN }}
      GPG_PRIVATE_KEY: ${{ steps.secret-presence.outputs.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ steps.secret-presence.outputs.GPG_PASSPHRASE }}
      DOCKER_HUB_TOKEN: ${{ steps.secret-presence.outputs.DOCKER_HUB_TOKEN }}
    steps:
      - name: Check whether secrets exist
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.SONAR_TOKEN }}" ] && echo "SONAR_TOKEN=true" >> $GITHUB_OUTPUT
          [ ! -z "${{ secrets.GPG_PRIVATE_KEY }}" ] && echo "GPG_PRIVATE_KEY=true" >> $GITHUB_OUTPUT
          [ ! -z "${{ secrets.GPG_PASSPHRASE }}" ] && echo "GPG_PASSPHRASE=true" >> $GITHUB_OUTPUT
          [ ! -z "${{ secrets.DOCKER_HUB_TOKEN }}" ] && echo "DOCKER_HUB_TOKEN=true" >> $GITHUB_OUTPUT
          exit 0

  build-extensions:
    runs-on: ubuntu-latest
    needs: [ secret-presence ]
    steps:
      # Set-Up
      - uses: actions/checkout@v3.3.0
      - uses: ./.github/actions/setup-java
      # Build
      - name: Build Extensions
        run: |-
          ./gradlew -p edc-extensions build
        env:
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  build-controlplane:
    name: "Create Docker Images for the ControlPlane"
    runs-on: ubuntu-latest
    needs: [ secret-presence ]
    if: |
      needs.secret-presence.outputs.DOCKER_HUB_TOKEN
    strategy:
      fail-fast: false
      matrix:
        name:
          - edc-runtime-memory
          - edc-controlplane-memory-hashicorp-vault
          - edc-controlplane-postgresql
          - edc-controlplane-postgresql-hashicorp-vault
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: ./.github/actions/publish-docker-image
        with:
          rootDir: edc-controlplane/${{ matrix.name }}
          imagename: ${{ matrix.name }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

  build-dataplane:
    name: "Create Docker Images for the DataPlane"
    runs-on: ubuntu-latest
    needs: [ secret-presence ]
    if: |
      needs.secret-presence.outputs.DOCKER_HUB_TOKEN
    strategy:
      fail-fast: false
      matrix:
        name:
          - edc-dataplane-azure-vault
          - edc-dataplane-hashicorp-vault
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: ./.github/actions/publish-docker-image
        with:
          rootDir: edc-dataplane/${{ matrix.name }}
          imagename: ${{ matrix.name }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

  publish-to-github-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [ secret-presence, build-extensions ]

    # do not run on PR branches, do not run on releases
    if: |
      needs.secret-presence.outputs.GPG_PASSPHRASE && needs.secret-presence.outputs.GPG_PRIVATE_KEY && github.event_name != 'pull_request' && github.ref != 'refs/heads/releases'
    steps:
      # Set-Up
      - uses: actions/checkout@v3.3.0

      - uses: ./.github/actions/setup-java
      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # publish snapshots
      - name: Publish snapshot versions
        run: |-
          echo "Publishing Version $(grep -e "version" gradle.properties | cut -f2 -d"=") to Github Packages"
          ./gradlew publishAllPublicationsToGitHubPackagesRepository
        env:
          REPO: ${{ github.repository }}
          GITHUB_PACKAGE_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

