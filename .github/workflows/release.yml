#################################################################################
#  Copyright (c) 2025 Cofinity-X GmbH
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Release"
run-name: "Release from ${{ github.ref_name }}"

on:
  workflow_dispatch:


jobs:
  run-all-tests:
    name: "Run All Tests"
    uses: ./.github/workflows/run-all-tests.yml
  # Gate
  validation:
    name: "Workflow Validation"
    needs: [ run-all-tests ]
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
      update_main_branch_version: ${{ steps.update-main.outputs.update_main_branch_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Output release version
        id: release-version
        run: |
          VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Output update main branch version
        id: update-main
        run: |
          IFS=.- read -r MAJOR MINOR PATCH SNAPSHOT<<<"${{ steps.release-version.outputs.RELEASE_VERSION }}" 
          if [[ $PATCH == '0' && -z $SNAPSHOT ]]; 
          then
            echo "update_main_branch_version=true" >> $GITHUB_OUTPUT
          else 
            echo "update_main_branch_version=false" >> $GITHUB_OUTPUT
          fi
      - name: Validations
        run: |
          if [[ "${{ github.repository }}" != "eclipse-tractusx/tractusx-edc" ]]; then
            echo "This workflow can only be run on the eclipse-tractusx/tractusx-edc repository."
            exit 1
          fi

          if [[ ! "${{ github.ref_name }}" =~ ^release/ ]]; then
            echo "This workflow can only be run on the branches starting with release/."
            exit 1
          fi
          
          if [[ "${{steps.release-version.outputs.RELEASE_VERSION}}" =~ SNAPSHOT ]]; then
            echo "This workflow can not be executed for SNAPSHOT versions."
            exit 1
          fi
  

  # Release: Maven Artifacts
  maven-release:
    name: Publish extension's release version to maven repository
    needs: [ validation ]
    permissions:
      contents: read
    if: needs.validation.outputs.RELEASE_VERSION
    uses: ./.github/workflows/trigger-maven-publish.yaml
    secrets: inherit
    with:
      version: ${{ needs.validation.outputs.RELEASE_VERSION }}

  # Release: docker images
  docker-release:
    name: Publish Docker images
    needs: [ validation ]
    if: needs.validation.outputs.RELEASE_VERSION
    uses: ./.github/workflows/trigger-docker-publish.yaml
    secrets: inherit
    with:
      docker_tag: ${{ needs.validation.outputs.RELEASE_VERSION }}

  # Release: Helm charts
  helm-release:
    name: Publish helm charts
    needs: [ validation ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup-helm
      - name: Package helm, update index.yaml and push to gh-pages
        run: |
          # Prepare git env
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"

          # Package all charts
          find charts -name Chart.yaml -not -path "./edc-tests/*" | xargs -n1 dirname | xargs -n1 helm package -u -d helm-charts

          git checkout gh-pages || git checkout -b gh-pages
          git pull --rebase origin gh-pages

          # Generate helm repo index.yaml
          helm repo index . --merge index.yaml --url https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/

          # Commit and push to gh-pages
          git add index.yaml helm-charts
          git commit -s -m "Release ${{ needs.validation.outputs.RELEASE_VERSION }}"

          git push origin gh-pages

  github-release:
    name: Publish new github release
    needs: [ validation, maven-release, docker-release, helm-release ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Git Config
        shell: bash
        run: |
          # Prepare git env
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"
      - name: Create Release Tag
        id: create_release_tag
        shell: bash
        run: |
          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag ${{ needs.validation.outputs.RELEASE_VERSION }}
          git push origin ${{ needs.validation.outputs.RELEASE_VERSION }}
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ needs.validation.outputs.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: ${{ needs.validation.outputs.update_main_branch_version == 'true' }}
          removeArtifacts: true

  # Release: Publish specs to GitHub Pages
  publish-openapi-to-gh-pages:
    name: "Publish OpenAPI UI spec GitHub Pages"
    permissions:
      contents: write
    needs: [ validation ]
    uses: ./.github/workflows/publish-openapi-ui.yml
    secrets: inherit
    with:
      version: ${{ needs.validation.outputs.RELEASE_VERSION }}

  # Release: Update Release Notes with Allure Report Link
  publish-allure-report-link-to-release:
    name: "Update Release Notes with Allure Report Link"
    runs-on: ubuntu-latest
    needs: [ validation, github-release ]
    permissions:
      contents: write
    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = "${{ needs.validation.outputs.RELEASE_VERSION }}";
            
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: version
            });

            const reportUrl = `https://${owner}.github.io/${repo}/allure-reports/${version}/`;
            const newBody = `${release.body || ''}\n\n**Test Report:** [View Report](${reportUrl})`;

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.id,
              body: newBody
            });

  main-branch-update:
    name: "Main Branch Update"
    runs-on: ubuntu-latest
    needs: [ validation, github-release ]
    if: ${{ needs.validation.outputs.update_main_branch_version == 'true' }}
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Version and Chart Updates
        uses: ./.github/actions/update-version-and-charts
        with:
          version: ${{ needs.validation.outputs.RELEASE_VERSION }}
          bump_version: "true"
      - name: Push main updates
        run: |
          git push origin main
