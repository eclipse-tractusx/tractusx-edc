---
# Default values for edc-controlplane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  ##
  ## Which derivate of the edc controlplane to use.
  ## One of:
  ##   * ghcr.io/catenax-ng/product-edc/edc-controlplane-memory
  ##   * ghcr.io/catenax-ng/product-edc/edc-controlplane-postgresql
  ##   * ghcr.io/catenax-ng/product-edc/edc-controlplane-cosmosdb
  ##
  repository: ghcr.io/catenax-ng/product-edc/edc-controlplane-memory
  pullPolicy: IfNotPresent
  ##
  ## Overrides the image tag whose default is the chart appVersion.
  ##
  tag: ""

##
## Image pull secret to create to obtain the container image
## Note: 'imagePullSecret.dockerconfigjson' takes precedence if configured together with 'imagePullSecrets'
##
imagePullSecret:
  dockerconfigjson: ""

##
## Existing image pull secret to use to obtain the container image
##
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  ##
  ## Specifies whether a service account should be created per release
  ##
  create: true
  ##
  ## Annotations to add to the service account
  ##
  annotations: {}
  ##
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 1001

##
## Whether to enable kubernetes liveness-probes
##
livenessProbe:
  enabled: true

##
## Whether to enable kubernetes readiness-probes
##
readinessProbe:
  enabled: true

##
## Whether to enable kubernetes startup-probes
##
startupProbe:
  enabled: true

##
## EDC endpoints exposed by the conrol-plane
##
edc:
  endpoints:
    # Default api exposing health checks etc
    default:
      port: "8080"
      path: /api
      ingress: false
    # Data management API
    data:
      port: "8181"
      path: /data
      ingress: true
    # Validation API
    validation:
      port: "8182"
      path: /validation
      ingress: false
    # Control API
    control:
      port: "9999"
      path: /api/controlplane/control
      ingress: true
    # IDS endpoints
    ids:
      port: "8282"
      path: /api/v1/ids
      ingress: true
    # Prometheus endpoint
    metrics:
      port: "9090"
      path: /metrics
      ingress: false

##
## Service to expose the running application on a set of Pods as a network service.
##
service:
  type: ClusterIP

##
## Ingress declaration to expose the network service.
##
ingresses:
  ## Public / Internet facing Ingress
  - enabled: true
    ##
    ## The hostname to be used to precisely map incoming traffic onto the underlying network service
    ##
    hostname: "edc-controlplane.local"
    ##
    ## Additional ingress annotations to add
    ##
    annotations: {}
    ##
    ## EDC endpoints exposed by this ingress resource
    ##
    endpoints:
      - ids
    ##
    ## Defines the ingress class to use https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
    ##
    className: ""
    ##
    ## Enables TLS on the ingress resource
    ##
    tls: false
    ##
    ## Adds cert-manager annotations to the ingress
    ##
    certManager:
      ##
      ## If preset enables certificate generation via cert-manager namespace scoped issuer
      ##
      issuer: ""
      ##
      ## If preset enables certificate generation via cert-manager cluster-wide issuer
      ##
      clusterIssuer: ""

  ## Private / Intranet facing Ingress
  - enabled: false
    ##
    ## The hostname to be used to precisely map incoming traffic onto the underlying network service
    ##
    hostname: "edc-controlplane.intranet"
    ##
    ## Additional ingress annotations to add
    ##
    annotations: {}
    ##
    ## EDC endpoints exposed by this ingress resource
    ##
    endpoints:
      - data
      - control
    ##
    ## Defines the ingress class to use https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
    ##
    className: ""
    ##
    ## Enables TLS on the ingress resource
    ##
    tls: false
    ##
    ## Adds cert-manager annotations to the ingress
    ##
    certManager:
      ##
      ## If preset enables certificate generation via cert-manager namespace scoped issuer
      ##
      issuer: ""
      ##
      ## If preset enables certificate generation via cert-manager cluster-wide issuer
      ##
      clusterIssuer: ""

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

##
## Container environment variables
##   e.g. for configuring JAVA_TOOL_OPTIONS (see: https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/envvars002.html)
##
##   JAVA_TOOL_OPTIONS: >
##     -Dhttp.proxyHost=proxy -Dhttp.proxyPort=80 -Dhttp.nonProxyHosts="localhost|127.*|[::1]" -Dhttps.proxyHost=proxy -Dhttps.proxyPort=443
##
env: {}

##
## EDC logging.properties configuring the java.util.logging subsystem
##
logging:
  properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n

##
## opentelemetry.properties configuring the opentelemetry agent
##
## See https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/ for further configuration options
##
opentelemetry:
  properties: |-
    otel.javaagent.enabled=true
    otel.javaagent.debug=false

##
## EDC configuration.properties
##
## Consult the eclipse-dataspaceconnector documentation for further details: https://github.com/eclipse-dataspaceconnector/DataSpaceConnector
##
configuration:
  properties: |-
    # edc.api.auth.key=
    # edc.api.control.auth.apikey.key=
    # edc.api.control.auth.apikey.value=
    # edc.assetindex.cosmos.account-name=
    # edc.assetindex.cosmos.container-name=
    # edc.assetindex.cosmos.database-name=
    # edc.assetindex.cosmos.preferred-region=
    # edc.atomikos.checkpoint.interval=
    # edc.atomikos.directory=
    # edc.atomikos.logging=
    # edc.atomikos.threaded2pc=
    # edc.atomikos.timeout=
    # edc.aws.access.key=
    # edc.aws.provision.retry.retries.max=
    # edc.aws.provision.role.duration.session.max=
    # edc.aws.secret.access.key=
    # edc.blobstore.endpoint=
    # edc.contractdefinitionstore.cosmos.account-name=
    # edc.contractdefinitionstore.cosmos.container-name=
    # edc.contractdefinitionstore.cosmos.database-name=
    # edc.contractdefinitionstore.cosmos.preferred-region=
    # edc.contractnegotiationstore.cosmos.account-name=
    # edc.contractnegotiationstore.cosmos.container-name=
    # edc.contractnegotiationstore.cosmos.database-name=
    # edc.contractnegotiationstore.cosmos.preferred-region=
    # edc.controlplane.validation-endpoint=
    # edc.core.retry.backoff.max=
    # edc.core.retry.backoff.min=
    # edc.core.retry.retries.max=
    # edc.core.system.health.check.liveness-period=
    # edc.core.system.health.check.readiness-period=
    # edc.core.system.health.check.startup-period=
    # edc.core.system.health.check.threadpool-size=
    # edc.cosmos.partition-key=
    # edc.cosmos.query-metrics-enabled=
    # edc.dataplane.queue.capacity=
    # edc.dataplane.wait=
    # edc.dataplane.workers=
    # edc.datasource.asset.name="default"
    # edc.datasource.contractdefinition.name="default"
    # edc.datasource.contractnegotiation.name="default"
    # edc.datasource.policy.name="default"
    # edc.datasource.transferprocess.name="default"
    # edc.datasource.default.pool.maxIdleConnections=
    # edc.datasource.default.pool.maxTotalConnections=
    # edc.datasource.default.pool.minIdleConnections=
    # edc.datasource.default.pool.testConnectionOnBorrow=
    # edc.datasource.default.pool.testConnectionOnCreate=
    # edc.datasource.default.pool.testConnectionOnReturn=
    # edc.datasource.default.pool.testConnectionWhileIdle=
    # edc.datasource.default.pool.testQuery=
    # edc.datasource.default.url=
    # edc.datasource.default.user=
    # edc.datasource.default.password=
    # edc.dpf.selector.url=
    # edc.events.topic.endpoint=
    # edc.events.topic.name=
    # edc.fs.config=
    # edc.hostname=
    # edc.identity.did.url=
    # edc.ids.catalog.id=
    # edc.ids.curator=
    # edc.ids.description=
    # edc.ids.endpoint=
    # edc.ids.id=
    # edc.ids.maintainer=
    # edc.ids.security.profile=
    # edc.ids.title=
    # edc.ids.validation.referringconnector=
    # edc.ion.crawler.did-type=
    # edc.ion.crawler.interval-minutes=
    # edc.ion.crawler.ion.url=
    # edc.metrics.enabled=
    # edc.metrics.executor.enabled=
    # edc.metrics.jersey.enabled=
    # edc.metrics.jetty.enabled=
    # edc.metrics.okhttp.enabled=
    # edc.metrics.system.enabled=
    # edc.negotiation.consumer.state-machine.batch-size=
    # edc.negotiation.provider.state-machine.batch-size=
    # edc.node.directory.cosmos.account.name=
    # edc.node.directory.cosmos.container.name=
    # edc.node.directory.cosmos.database.name=
    # edc.node.directory.cosmos.preferred.region=
    # edc.oauth.client.id=
    # edc.oauth.private.key.alias=
    # edc.oauth.provider.audience=
    # edc.oauth.provider.jwks.refresh=
    # edc.oauth.provider.jwks.url=
    # edc.oauth.public.key.alias=
    # edc.oauth.token.url=
    # edc.oauth.validation.nbf.leeway=
    # edc.receiver.http.auth-code=
    # edc.receiver.http.auth-key=
    # edc.receiver.http.endpoint=
    # edc.transfer.proxy.endpoint=
    # edc.transfer.dataplane.sync.token.validity=
    # edc.transfer.proxy.token.signer.privatekey.alias=
    # edc.transfer.functions.check.endpoint=
    # edc.transfer.functions.enabled.protocols=
    # edc.transfer.functions.transfer.endpoint=
    # edc.transfer-process-store.cosmos.account.name=
    # edc.transfer-process-store.cosmos.container-name=
    # edc.transfer-process-store.cosmos.preferred-region=
    # edc.transfer-process-store.database.name=
    # edc.transfer.state-machine.batch-size=
    # edc.vault=
    # edc.vault.certificate=
    # edc.vault.clientid=
    # edc.vault.clientsecret=
    # edc.vault.name=
    # edc.vault.tenantid=
    # edc.webdid.doh.url=
    # edc.web.rest.cors.enabled=
    # edc.web.rest.cors.headers=
    # edc.web.rest.cors.methods=
    # edc.web.rest.cors.origins=
